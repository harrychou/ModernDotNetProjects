===============================
1. Introducing C# and the .NET Framework 1
===============================
Object Orientation 1
Type Safety 2
Memory Management 2
Platform Support 3
C#’s Relationship with the CLR 3
The CLR and .NET Framework 3
C# and Windows Runtime 5
What’s New in C# 5.0 6

  * support async functions via 'async' and 'await'
  * asynchonous continuation
    - make it easier to write responsive and thread-safe rich-client applications
    - make it easy to write highly concurrent and efficient I/O-bound applications that don’t tie up a thread resource per operation. 

What’s New in C# 4.0 6

  * Dynamic binding
    (run-time resolution of types and members)
  * Optional parameters and named arguments
    (specify default arg values, named args allow caller to specify arg by name)
  * Type variance with generic interfaces and delegates
    (covariant and contravariant, allow more natural type conversions)
  * COM interoperability improvements
    - pass by ref without 'ref'
    - avoid Primary Interop Assemblies
    - COM variant type return values are map to 'dynamic' rather than 'object', no need for casting

What’s New in C# 3.0 7

  * LINQ
    - implicit typed local variable (var)
    - object initializer
    - lambda expressions
    - extension methods
    - query expressions
    - expression trees (code DOM that describe lamda)
  * automatic properties
  * partial class/methods

===============================
2. C# Language Basics  9
===============================
A First C# Program 9
Syntax 12
Type Basics 15
Numeric Types 23
Boolean Type and Operators 30
Strings and Characters 32
Arrays 34
Variables and Parameters 38
Expressions and Operators 47
Statements 51
Namespaces 59

===============================
3. Creating Types in C# 67
===============================
Classes 67
Inheritance 80
The object Type 89
Structs 93
Access Modifiers 94
Interfaces 96
Enums 102
Nested Types 105
Generics 106

===============================
4. Advanced C#  119
===============================
Delegates 119
  - A delegate is an object that knows how to call a method.
Events 128
Lambda Expressions 135
Anonymous Methods 139
try Statements and Exceptions 140
Enumeration and Iterators 148
Nullable Types 153
Operator Overloading 158
Extension Methods 162
Anonymous Types 164
Dynamic Binding 165
Attributes 173
Caller Info Attributes (C# 5) 175
Unsafe Code and Pointers 177
Preprocessor Directives 180
XML Documentation 182

===============================
5. Framework Overview 187
===============================
The CLR and Core Framework 189
Applied Technologies 194

===============================
6. Framework Fundamentals  201
===============================
String and Text Handling 201
Dates and Times 214
Dates and Time Zones 221
Formatting and Parsing 227
Standard Format Strings and Parsing Flags 233
Other Conversion Mechanisms 240
Globalization 244
Working with Numbers 245
Enums 249
Tuples 252
The Guid Struct 253
Equality Comparison 254
Order Comparison 264
Utility Classes 267

===============================
7. Collections 271
===============================
Enumeration 271
The ICollection and IList Interfaces 279
The Array Class 282
Lists, Queues, Stacks, and Sets 291
Dictionaries 299
Customizable Collections and Proxies 306
Plugging in Equality and Order 312

===============================
8. LINQ Queries 319
===============================
Getting Started 319
Fluent Syntax 321
Query Expressions 328
Deferred Execution 332
Subqueries 338
Composition Strategies 342
Projection Strategies 345
Interpreted Queries 347
LINQ to SQL and Entity Framework 354
Building Query Expressions 368

===============================
9. LINQ Operators 375
===============================
Overview 377
Filtering 379
Projecting 383
Joining 395
Ordering 403
Grouping 406
Set Operators 409
Conversion Methods 410
Element Operators 413
Aggregation Methods 415
Quantifiers 419
Generation Methods 420

===============================
10. LINQ to XML 423
===============================
Architectural Overview 423
X-DOM Overview 424
Instantiating an X-DOM 427
Navigating and Querying 430
Updating an X-DOM 435
Working with Values 438
Documents and Declarations 441
Names and Namespaces 444
Annotations 450
Projecting into an X-DOM 450

===============================
11. Other XML Technologies 457
===============================
XmlReader 458
XmlWriter 467
Patterns for Using XmlReader/XmlWriter 469
XmlDocument 473
XPath 477
XSD and Schema Validation 481
XSLT 484

===============================
12. Disposal and Garbage Collection 485
===============================
IDisposable, Dispose, and Close 485
Automatic Garbage Collection 490
Finalizers 493
How the Garbage Collector Works 497
Managed Memory Leaks 501
Weak References 505

===============================
13. Diagnostics and Code Contracts 509
===============================
Conditional Compilation 509
Debug and Trace Classes 512
Code Contracts Overview 516
Preconditions 520
Postconditions 524
Assertions and Object Invariants 527
Contracts on Interfaces and Abstract Methods 528
Dealing with Contract Failure 529
Selectively Enforcing Contracts 531
Static Contract Checking 533
Debugger Integration 535
Processes and Process Threads 536
StackTrace and StackFrame 537
Windows Event Logs 538
Performance Counters 541
The Stopwatch Class 545

===============================
14. Concurrency & Asynchrony 547
===============================

  * concurrency: deal with more than one thing at a time
  * basic: threading and tasks
  * principles of asynchrony
  * C#5

Introduction 547

  * why concurrency is needed
    - responsive UI
    - process requests simultaneously 
      (IIS handls requests)
    - parallel programming 
      (distribute intensive computation to multiple computers/processors)
    - speculative execution
      (have a background process/thread try to predict what is needed, have multiple process doing the same task using different algorithm, see which one finish first)
  * multi-thread is the general mechanism
    - support in OS level and CLR level

Threading 548

  * thread
    - execution path
    - independent to each other
    - multi-thread programming
      * multiple threads exist within the same process
      * share the same excution context (memory, ie. shared state)
  * creating thread
    - Metro apps doe not allow creating and starting threads
      (need to use Tasks)
    - client app: by default single thread (UI/main thread)
    - 'Thread' object to start new thread

      Thread t = new Tread(DelegateMethod);
      t.Start();

    - a thread is 'preempted' when its execution is interrupted by other thread
    - to get current thread: Thread.CurrentThread
    - 'Name', 'IsAlive'
  * join and sleep
    - 't.Join()' block the calling thread (current main thread), until the called thread (t in this case) completes.
    - 'Thread.Sleep()' pause the current thread, yield to CPU to decide what to do
    - 'Thread.Yield()' pause the current thread, yield to other threads in the same process
  * Blocking
    - when in 'Sleep' or 'Yield' or waiting on other thread to 'Join', the thread is called 'blocked'
    - when thread blocks/unblocks, OS performs a 'context switch' (takes only 2 micro-sec)
    - 'I/O bound' vs. 'Compute bound'
      * a thread either spend a lot of time waiting (I/O bound)
      * or, a thread spend a lot of time executingt (compute bound)
    - blocking vs. spinning
      * blocking, let other thread run, cause context switch
      * spining, wasting resource but occupy the current thread, does not cause context switch
  * local vs. shared state
    - each thread has its own memory stack and local variable
    - threads can share data by
      * common object reference (passed in)
      * lambda can capture the local field (into field by CLR)
      * static fields
    - shared state can cuase 'thread safety' issues
    - shared state can be fixed by locking
    - better way is to avoid shared state (by asynchronous programming patterns)
  * locking and thread safety
    - locking: 
      static readonly object _locker = new object();
      .... 
      lock (_locker)
      {
        ....
      }
    - locking ensure only one thread can execute the statements within at one time
    - locking can provide 'thread safety'
    - locking is not silver bullet, easy to forget, can create dead-lock
    - good use of locking: around accessing a shared inmemory cache for frequently accessed database objects in an ASP.NET application. (see page 888)
  * pass data to a thread
    - use lambda is the easiest
      Thread t = new Thread ( () => Print ("Hello from t!") );
      t.Start();
      ...
      static void Print (string message) { Console.WriteLine (message); }
    - remeber lammbda's variables are shared
      for (int i = 0; i < 10; i++)
        new Thread (() => Console.Write (i)).Start();
      (will print out nondeterministic number)
    - to solve this: copy local
      for (int i = 0; i < 10; i++)
      {
        int temp = i;
        new Thread (() => Console.Write (temp)).Start();
      } 
  * exception handling
    - try to handle exception in each thead's main entry point
    - to centrally handle the exception
      Application.DispatcherUnhandledException
      Applicaiton.ThreadException
  * foreground vs. background thread
    - foreground:
      * all thread created explcitly
      * process cannot exit without all foreground threads end
    - background:
      * background threads end when process (all foreground threads) ends
  * thread priority
    - has nothing to do with background or foreground
  * signaling
    - provide a hook for main thread to 'signal' the created thread

      var signal = new ManualResetEvent (false);
      new Thread (() =>
      {
        Console.WriteLine ("Waiting for signal...");
        signal.WaitOne();
        signal.Dispose();
        Console.WriteLine ("Got signal!");
      }).Start();
      Thread.Sleep(2000);
      signal.Set(); // "Open" the signal

  * threading in Rich UI
    - to provide more responsiveness, it is common to create 'worker thread' to do some work, while updating UI with progress
    - while UI controls can only be access from main UI thread
    - the 'worker thread' need a way to 'marshal' the UI update request to the UI main thread
    - WPF, WinForm, Metro all have differnt ways to do it
    - all with using delegate
  * Synchronization Context
    - provided by System.ComponentModel
    - a way to marshal request to main UI thread
    - Framework 2.0 introduce 'BackgroundWorker' (replaced by Tasks and Asynchronous functions) to make it easy to use SynchronizationContext 
    - The new way (Tsks and async functions) also leverage SynchnronizationContext
  * Thread Pool
    - avoid constant thread switching, useful if have hundreds of threads
    - things to notice
      * cannot Name the threads
      * always background threads
      * blocking pooled threads can degrade performance
    - to run something on pooled threads
      Task.Run (() => Console.WriteLine ("Hello from the thread pool"));
    - Thread pools are used in
      * WCF/Remoting/ASP.NET/WebService/App Server
      * System.Timers.Timer and System.Threading.Timer
      * Parallel Programming constructs (PLINQ, Parallel)
      * BackgroundWorker
      * Asynchronous delegates
    - Hygiene of thread pool
      (avoid oversubscription)

Tasks 565

  * Task
    - thread is too low level
      * no easy way to return data from thread
      * can't continue something after thread finish (Join will work but need blocking current thread)
    - thread is hard to compose large app
    - higher level of abstraction than Thread
    - represents more than thread (there are other concurrent operations)
    - can leverage thread pool if needed
    - with 'TaskCompletionSource' can avoid threads for I/O-bound operations
    - 'compositional' by chain together through 'continuations'
    - introduced in Framework 4.0, enhanced to support asynchronous functions
  * Starting a Task
    Task.Run(() => Console.WriteLine("Foo"));
    - Task use pooled thread by default, which make all threads 'background thread', so the mainthread need to keep the app running before existing, or the 'background' threads will not complete
    - Wait
      equivelent of thread.Join(), block current thread until the started thread finished
      * can timeout
      * can pass in timeout and cancellation token to end the wait early (see Cancellation)
    - long running tasks
      * default CLR will use thread pool (ideal for short-running compute-intense work)
      * thread pool is not suitable for long-running threads
      * you can pass ThreadCreationOptions.LongRunning to Task.Factory.StartNew 
      * or. if I/O bound, use TaskCompletionSource and asyn functions to use callbacks (continuations)
        if compute bound, use producer/comsumer queue
    - allow easy capture of return value
      Task<int> task = Task.Run (() => { Console.WriteLine ("Foo"); return 3; });
      ...
      task.Result
      * calling task.Result will have the effect of waiting for the result to come
      * Task<TResult> is also called Future 
    - exception handling
      * if task 'faults', the error will be captured and rethrow later, when .Wait() or .Result is called
      * CLR wraps the exception in an AggregateException in order to play well with parallel programming scenarios;

      Task task = Task.Run (() => { throw null; });
      try
      {
        task.Wait();
      }
      catch (AggregateException aex)
      {
        if (aex.InnerException is NullReferenceException)
          Console.WriteLine ("Null!");
        else
          throw;
      }

      * Task also provide IsFaulted and IsCanceled properties
        - if IsFaulted and IsCanceled are true, means no error
        - If IsCanceled is true, an OperationCanceledOperation was thrown
        - If IsFaulted is true, other types of exception was thrown and the Exception property will indicate the error.
      * if we don't use Wait() or .Result, any exceptions in Task will be silent
        => unobserved exception
        - in CLR 4.0, they would actually terminate your program by re-throw the exception on the finalizer thread when the task dropped out of scope and was garbage collected. 
        - will cause problem of timing of exception is not easy to know where
        - this behavior was dropped in CLR 4.5
      * when to 'not' handle exceptions
        - if just accessing un-essential resource
        - not handling excepitons may leave your system (including data) in an invalid state
        - make diagnose info/log incomplete
    - continuation: says to a task, “when you’ve finished, continue doing something else.”
      * .GetAwaiter, OnCompleted and GetResult

        Task<int> primeNumberTask = Task.Run(() => ... );

        var awaiter = primeNumberTask.GetAwaiter();
        awaiter.OnCompleted(() =>
        {
          int result = awaiter.GetResult();
          // works to be done after task completed
        });

      * .ContinueWith
    - 
    
Principles of Asynchrony 573
Asynchronous Functions in C# 5.0 578
Asynchronous Patterns 594
Obsolete Patterns 601

===============================
15. Streams and I/O 605
===============================
Stream Architecture 605
Using Streams 607
Stream Adapters 621
Compression Streams 629
Working with Zip Files 631
File and Directory Operations 632
File I/O in Windows Runtime 642
Memory-Mapped Files 644
Isolated Storage 647

===============================
16. Networking 653
===============================
Network Architecture 653
Addresses and Ports 655
URIs 656
Client-Side Classes 658
Working with HTTP 671
Writing an HTTP Server 677
Using FTP 680
Using DNS 682
Sending Mail with SmtpClient 683
Using TCP 683
Receiving POP3 Mail with TCP 687
TCP in Windows Runtime 689

===============================
17. Serialization 691
===============================
Serialization Concepts 691
The Data Contract Serializer 695
Data Contracts and Collections 705
Extending Data Contracts 707
The Binary Serializer 710
Binary Serialization Attributes 712
Binary Serialization with ISerializable 715
XML Serialization 719

===============================
18. Assemblies 729
===============================
What’s in an Assembly 729
Strong Names and Assembly Signing 734
Assembly Names 737
Authenticode Signing 739
The Global Assembly Cache 743
Resources and Satellite Assemblies 745
Resolving and Loading Assemblies 754
Deploying Assemblies Outside the Base Folder 759
Packing a Single-File Executable 760
Working with Unreferenced Assemblies 762

===============================
19. Reflection and Metadata 765
===============================
Reflecting and Activating Types 766
Reflecting and Invoking Members 773
Reflecting Assemblies 785
Working with Attributes 786
Dynamic Code Generation 792
Emitting Assemblies and Types 799
Emitting Type Members 803
Emitting Generic Methods and Types 808
Awkward Emission Targets 810
Parsing IL 814

===============================
20. Dynamic Programming 821
===============================
The Dynamic Language Runtime 821
Numeric Type Unification 823
Dynamic Member Overload Resolution 824
Implementing Dynamic Objects 830
Interoperating with Dynamic Languages 833

===============================
21. Security 837
===============================
Permissions 837
Code Access Security (CAS) 842
Allowing Partially Trusted Callers 845
The Transparency Model 847
Sandboxing Another Assembly 855
Operating System Security 858
Identity and Role Security 861
Cryptography Overview 862
Windows Data Protection 863
Hashing 864
Symmetric Encryption 865
Public Key Encryption and Signing 870

===============================
22. Advanced Threading 875
===============================
Synchronization Overview 876
Exclusive Locking 876
Locking and Thread Safety 884
Non-Exclusive Locking 890
Signaling with Event Wait Handles 895
The Barrier Class 903
Lazy Initialization 904
Thread-Local Storage 907
Interrupt and Abort 909
Suspend and Resume 910
Timers 911

===============================
23. Parallel Programming 915
===============================
Why PFX? 915
PLINQ 918
The Parallel Class 931
Task Parallelism 938
Working with AggregateException 947
Concurrent Collections 949
BlockingCollection<T> 952

===============================
24. Application Domains 957
===============================
Application Domain Architecture 957
Creating and Destroying Application Domains 958
Using Multiple Application Domains 960
Using DoCallBack 962
Monitoring Application Domains 963
Domains and Threads 963
Sharing Data Between Domains 965

===============================
25. Native and COM Interoperability 971
===============================
Calling into Native DLLs 971
Type Marshaling 972
Callbacks from Unmanaged Code 975
Simulating a C Union 975
Shared Memory 976
Mapping a Struct to Unmanaged Memory 979
COM Interoperability 983
Calling a COM Component from C# 985
Embedding Interop Types 988
Primary Interop Assemblies 989
Exposing C# Objects to COM 990

===============================
26. Regular Expressions 991
===============================
Regular Expression Basics 992
Quantifiers 996
Zero-Width Assertions 997
Groups 1000
Replacing and Splitting Text 1001
Cookbook Regular Expressions 1003
Regular Expressions Language Reference 1006

===============================
Index 1011
===============================
